from __future__ import print_function, division, unicode_literals

from constants import FN_PARSE_LPT_RGX_FNAME as _RGX_FNAME
from constants import FN_PARSE_NCSMVCE_LPT_RGX_DNAME as _RGX_DNAME_GGP
from ncsm_vce_lpt.ExpNcsmVceLpt import ExpNcsmVceLpt
from ncsm_vce_lpt.parser import exp
from nushellx_lpt.DataMapNushellxLpt import DataMapNushellxLpt


class DataMapNcsmVceLpt(DataMapNushellxLpt):
    """Data type that stores a map to *.lpt file data, generated by NuShellX
    on interaction files from a VCE of NCSM results
    """
    # noinspection PyUnusedLocal
    def __init__(
            self, parent_directory, exp_list=None, exp_filter_fn=None, **kwargs
    ):
        super(DataMapNcsmVceLpt, self).__init__(
            parent_directory=parent_directory,
            exp_list=exp_list, exp_filter_fn=exp_filter_fn,
            _exp_type=ExpNcsmVceLpt,
            _regex_filename=_RGX_FNAME,
            _regex_ggparent_dir=_RGX_DNAME_GGP
        )

    def _exp_from_file_path(self, f):
        return exp(filepath=f)

    def aeff_eq_a_to_ground_energy_map(
            self, z, nmax, n1, n2, nshell, ncomponent, scalefactor=None):
        aeff_eq_a_to_ground_energy = dict()
        for exp0 in self.map.keys():
            presc = exp0.A_presc
            if presc[0] != presc[1] or presc[0] != presc[2]:
                continue
            elif exp0.Z != z or exp0.Nmax != nmax:
                continue
            elif exp0.n1 != n1 or exp0.n2 != n2:
                continue
            elif exp0.nshell != nshell or exp0.ncomponent != ncomponent:
                continue
            elif exp0.scale != scalefactor:
                continue
            else:
                a = presc[0]
                dat = self[exp0]
                ground_energy_map = dat.mass_ground_energy_map()
                if a in ground_energy_map:
                    ground_energy = ground_energy_map[a]
                    aeff_eq_a_to_ground_energy[a] = ground_energy
                else:
                    continue
        return aeff_eq_a_to_ground_energy
